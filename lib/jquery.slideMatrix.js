// Generated by CoffeeScript 1.3.1
(function() {

  (function($, window) {
    return $.fn.extend({
      slideMatrix: function() {
        var argument, controls, currentItemPos, direction, initialItem, items, nextElmData, nextItem, nextItemPos, nextPos, optionsOrArgument,
          _this = this;
        optionsOrArgument = arguments[0];
        switch (optionsOrArgument) {
          case 'slideTo':
            argument = arguments[1];
            currentItemPos = this.currentItemPos();
            nextPos = {};
            if (typeof argument === 'string') {
              nextElmData = this.find(argument).data();
              nextPos.x = nextElmData.x || 0;
              nextPos.y = nextElmData.y || 0;
            } else if (typeof argument === 'object') {
              nextPos.x = argument.x || 0;
              nextPos.y = argument.y || 0;
            }
            nextItem = this.find(".slideMatrixItem[data-x='" + nextPos.x + "'][data-y='" + nextPos.y + "']");
            if (nextItem != null) {
              if (nextPos.x > currentItemPos.x) {
                if (nextItem.length === 0 && this.settings.wraparound) {
                  console.log('Should wrap!');
                } else {
                  this.slideToItem(nextItem, 'right');
                }
              } else if (nextPos.x < currentItemPos.x) {
                if (nextPos.x < 0 && this.settings.wraparound) {
                  console.log('Should wrap!');
                } else if (nextPos.x >= 0) {
                  this.slideToItem(nextItem, 'left');
                }
              } else if (nextPos.x === currentItemPos.x) {
                if (nextPos.y > currentItemPos.y) {
                  if (nextItem.length === 0 && this.settings.wraparound) {
                    console.log('Should wrap!');
                  } else {
                    this.slideToItem(nextItem, 'up');
                  }
                } else if (nextPos.y < currentItemPos.y) {
                  if (nextPos < 0 && this.settings.wraparound) {
                    console.log('Should wrap!');
                  } else {
                    this.slideToItem(nextItem, 'down');
                  }
                }
              }
            }
            break;
          case 'slide':
            direction = arguments[1];
            currentItemPos = this.currentItemPos();
            nextItemPos = (function() {
              switch (direction) {
                case 'up':
                  return {
                    x: currentItemPos.x,
                    y: currentItemPos.y + 1
                  };
                case 'right':
                  return {
                    x: currentItemPos.x + 1,
                    y: currentItemPos.y
                  };
                case 'down':
                  return {
                    x: currentItemPos.x,
                    y: currentItemPos.y - 1
                  };
                case 'left':
                  return {
                    x: currentItemPos.x - 1,
                    y: currentItemPos.y
                  };
              }
            })();
            nextItem = this.find(".slideMatrixItem[data-x='" + nextItemPos.x + "'][data-y='" + nextItemPos.y + "']");
            if (nextItem.length === 0 && this.settings.wraparound) {
              console.log('Should wrap!');
            } else if (nextItem.length > 0) {
              this.slideToItem(nextItem, direction);
            }
            break;
          default:
            this.defaultOptions = {
              initialItemFilter: ':first',
              wraparound: false,
              slideSpeed: 250
            };
            this.settings = $.extend({}, this.defaultOptions, optionsOrArgument);
            this.currentItemPos = function() {
              return {
                x: this.currentItem.data('x') || 0,
                y: this.currentItem.data('y') || 0
              };
            };
            this.sliding = false;
            this.slideToItem = function(item, direction) {
              var cssAttr, currentItemCssEnd, nextItemCssEnd, nextItemCssStart, nextItemCssStartValue,
                _this = this;
              cssAttr = direction === 'up' || direction === 'down' ? 'top' : 'left';
              nextItemCssStartValue = (function() {
                switch (direction) {
                  case 'up':
                    return -this.currentItem.height();
                  case 'right':
                    return this.currentItem.width();
                  case 'down':
                    return this.currentItem.height();
                  case 'left':
                    return -this.currentItem.width();
                }
              }).call(this);
              nextItemCssStart = (function() {
                var o;
                o = {};
                o[cssAttr] = nextItemCssStartValue;
                return o;
              })();
              nextItemCssEnd = (function() {
                var o;
                o = {};
                o[cssAttr] = 0;
                return o;
              })();
              currentItemCssEnd = (function() {
                var o;
                o = {};
                o[cssAttr] = -nextItemCssStartValue;
                return o;
              })();
              item.css(nextItemCssStart);
              item.show();
              if (this.sliding !== true) {
                this.sliding = true;
                this.currentItem.animate(currentItemCssEnd, this.settings.slideSpeed);
                return item.animate(nextItemCssEnd, this.settings.slideSpeed, function() {
                  _this.currentItem.hide().css({
                    left: 0,
                    top: 0
                  });
                  _this.currentItem = item;
                  return _this.sliding = false;
                });
              }
            };
            controls = $("[data-target='" + this.selector + "']");
            controls.click(function(e) {
              var $control, $target, action;
              e.preventDefault();
              if (_this.sliding !== true) {
                $control = $(e.target);
                $target = $($control.data('target'));
                action = $control.data('action');
                switch (action) {
                  case 'slideTo':
                    if ($control.data('selector') != null) {
                      _this.slideMatrix(action, $control.data('selector'));
                    } else {
                      _this.slideMatrix(action, {
                        x: $control.data('x'),
                        y: $control.data('y')
                      });
                    }
                    break;
                  case 'slide':
                    _this.slideMatrix(action, $control.data('direction') || 'right');
                    break;
                  default:
                    return false;
                }
                return false;
              }
            });
            items = this.find('.slideMatrixItem');
            initialItem = items.filter(this.settings.initialItemFilter);
            items.hide();
            initialItem.show();
            this.currentItem = initialItem;
        }
        return this;
      }
    });
  })(jQuery, this);

}).call(this);
